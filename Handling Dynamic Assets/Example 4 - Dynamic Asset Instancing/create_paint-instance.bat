@echo off
@if "%uname%"=="" goto error1
@if "%passwd%"=="" goto error1
@if "%server%"=="" goto error1

@set version=
@if "%~1"=="" goto error2
@if "%~2"=="" goto error2
@if "%~3"=="" goto tryp0
@set productId=%~3
@goto  start

:tryp0
@rem if  not, do we have a session ongoing (file __p0 contains the id)
@for /f "tokens=1,2 delims=,:{} " %%a in (__p0) do @set %%~a=%%~b
@if /I "%productId%" EQU "" goto error2

:start
@rem echo starting...
@set fullId=%productId%
@if /I "%version%" EQU "" goto :ready
@set fullId=%productId%:%version%

:ready
@rem echo full id is %fullId%
@set instanceId=%1
@set color=%2
@set configId=inst%instanceId%

@rem todo: see below re. thingworx;if you need to make it mandatory, move tha code here...

@rem we should first check this instance does not already exist
@if EXIST __p9 @del __p9
@echo testing instance %instanceId%
@curl -u %uname%:%passwd% -H "X-Requested-With: XMLHttpRequest" -k -H Accept:application/json %server%/ExperienceService/id-resolution/resolutions?key=urn:product:instance:%instanceId% --output __p9
@for /f "tokens=1,2 delims=[]{} " %%a in (__p9) do @set resolutions=%%b
@if /I "%resolutions%" NEQ "" goto duplicate

@rem we are ok to proceed 
@rem echo mapping color %color%, product %fullId" to instance %instanceId% 
@curl -u %uname%:%passwd% -H "Content-Type: application/json" -H "X-Requested-With: XMLHttpRequest" -k -d "{\"key\": \"urn:product:config:%configId%\", \"value\": \"%color%\", \"resourcetype\":\"color\"}" %server%/ExperienceService/id-resolution/mappings
@curl -u %uname%:%passwd% -H "Content-Type: application/json" -H "X-Requested-With: XMLHttpRequest" -k -d "{\"key\": \"urn:product:config:%configId%\", \"value\": \"%fullId%\", \"resourcetype\":\"productid\"}" %server%/ExperienceService/id-resolution/mappings
@curl -u %uname%:%passwd% -H "Content-Type: application/json" -H "X-Requested-With: XMLHttpRequest" -k -d "{\"key\": \"urn:product:instance:%instanceId%\", \"value\": \"urn:product:config:%configId%\"}" %server%/ExperienceService/id-resolution/mappings
@rem also kep a map of all the instances - basically, we can resolve this key and get a list of all the instance ids
@curl -u %uname%:%passwd% -H "Content-Type: application/json" -H "X-Requested-With: XMLHttpRequest" -k -d "{\"key\": \"urn:product:instance\", \"value\": \"productId:%fullId%:instanceId:%instanceId%\", \"resourcetype\":\"instanceid\"}" %server%/ExperienceService/id-resolution/mappings

@rem todo : if we want the thing to always be there, we should move this section to occur before the color/product mapping
@rem now lets add a Thing
:thing
@if EXIST __p7 @del __p7
@if EXIST __p8 @del __p8
@rem we create an instance of a Thingtemplate here by calling thingworx using a helper service calle droneHelper
@rem as an example, it takes as a parameter the color we are setting 
@rem the name of the Thing (the drone) is generated by thingworx and passed back to us, the caller
@rem we map this to the instanceId

@rem create thing from the template service
@curl -u %uname%:%passwd% -H "X-Requested-With: XMLHttpRequest" -H "accept:application/json" -H "content-type: application/json" ^
-d "{ \"color\":\"%color%\" }" ^
-k %server%/Thingworx/Things/droneHelper/Services/createNewDroneInstance %verbose% --output __p7
@rem test the results - did we create the thing?
@set result=
@for /f "tokens=1,2 delims=[] " %%a in (__p7) do @echo %%~b > __p8
@for /f "tokens=1,2 delims=,:[{}] " %%a in (__p8) do @set %%~a=%%~b
@if /I "%result%" EQU "" goto thingfail
@set thingname=%result%
@echo created thing %thingname% - mapping to %instanceId%
@curl -u %uname%:%passwd% -H "Content-Type: application/json" -H "X-Requested-With: XMLHttpRequest" -k -d "{\"key\": \"urn:product:config:%configId%\", \"value\": \"%thingname%\", \"resourcetype\":\"thingname\"}" %server%/ExperienceService/id-resolution/mappings
@rem end of todo

:test 
@echo testing instance %instanceId%
@curl -u %uname%:%passwd% -H "X-Requested-With: XMLHttpRequest" -k -H Accept:application/json %server%/ExperienceService/id-resolution/resolutions?key=urn:product:instance:%instanceId%
@goto done

:thingfail
@echo Error : failed to create new Thing
@type __p7
@goto test
:duplicate
@echo Error: instance %instanceId% already exists
@goto done
:abort
@echo aborting due to error
@echo:
:error1
@echo remember to set uname, passwd and server environment variables
@echo:
:error2
@echo usage : create_paint_instance ^<instanceID^> ^<color^> ^<productId^>
@echo:
@echo    e.g. create_paint_instance 101.1 red p101
@set ERRORLEVEL=1
:done
