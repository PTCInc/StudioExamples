{
  "attributes": {
    "twx-widget": "",
    "widget-id": "view-1",
    "widget-name": "view-1",
    "is-widget-container": "true",
    "viewtype": "ar"
  },
  "children": [
    {
      "name": "twx-container-content",
      "children": [
        {
          "attributes": {
            "twx-widget": "",
            "widget-id": "3DContainer-1",
            "widget-name": "3D Container",
            "is-widget-container": "true",
            "dropshadow": "true"
          },
          "name": "twx-dt-view",
          "children": [
            {
              "name": "twx-container-content",
              "children": [
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "shaders",
                    "widget-name": "shaders",
                    "text": "<script name=\"green\" type=\"x-shader/x-fragment\">\n\n// Per-pixel color data passed through the pixel shader.\nstruct PixelShaderInput\n{\n    half4   pos : SV_POSITION;\n};\n\n// a very simple pixel shader which just draws everything green\nmin16float4 main(PixelShaderInput input) : SV_TARGET\n{\n    return min16float4(0.,1.,0.,1.);\n}\n</script>\n\n<script name=\"green\" type=\"x-shader/x-vertex\">\n\n// A constant buffer that stores the model transform.\ncbuffer ModelConstantBuffer : register(b0)\n{\n    float4x4 model;\n    float4x4 inverse;\n};\n// A constant buffer that stores each set of view and projection matrices in column-major format.\ncbuffer ViewProjectionConstantBuffer : register(b2)\n{\n    float4x4 viewProjection[2];\n    float4x4 viewInverse;\n};\n\n// Per-vertex data used as input to the vertex shader.\nstruct VertexShaderInput\n{\n    half4 pos     : POSITION;\n    uint  instId  : SV_InstanceID;\n};\n\n// Per-vertex data passed to the geometry shader.\n// Note that the render target array index will be set by the geometry shader\n// using the value of viewId.\nstruct VertexShaderOutput\n{\n    half4 pos     : SV_POSITION;\n    uint  rtvId   : SV_RenderTargetArrayIndex; // SV_InstanceID % 2\n};\n\n// Simple shader to do vertex processing on the GPU.\nVertexShaderOutput main(VertexShaderInput input)\n{\n    VertexShaderOutput output;\n    half4 pos = half4(input.pos);\n\n    // Note which view this vertex has been sent to. Used for matrix lookup.\n    // Taking the modulo of the instance ID allows geometry instancing to be used\n    // along with stereo instanced drawing; in that case, two copies of each\n    // instance would be drawn, one for left and one for right.\n    int idx = input.instId % 2;\n\n    // Transform the vertex position into world space.\n    pos = mul(pos, model);\n    // Correct for perspective and project the vertex position onto the screen.\n    output.pos = mul(pos, viewProjection[idx]);\n\n    // Set the instance ID. The pass-through geometry shader will set the\n    // render target array index to whatever value is set here.\n   output.rtvId = idx;\n\n    return output;\n}\n</script>"
                  },
                  "name": "twx-tml-text"
                },
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "spatialTarget",
                    "widget-name": "spatialTarget",
                    "rx": "-90"
                  },
                  "name": "twx-dt-target-spatial"
                },
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "quadcopter",
                    "widget-name": "quadcopter",
                    "is-widget-container": "true",
                    "src": "Uploaded/quadcopter.pvz",
                    "y": "0.04547261819243431"
                  },
                  "name": "twx-dt-model",
                  "children": [
                    {
                      "name": "twx-container-content"
                    }
                  ]
                },
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "metaDisplay",
                    "state-format-value": "text",
                    "font-color": "green",
                    "widget-name": "metaDisplay",
                    "text": "metadata will appear here",
                    "scale": "1.0000",
                    "x": "0.2378",
                    "y": "0.1793",
                    "z": "-0.0334",
                    "rx": "0.00",
                    "ry": "90.00",
                    "rz": "20.29",
                    "visible": "false"
                  },
                  "name": "twx-dt-label"
                },
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "playButton",
                    "widget-name": "playButton",
                    "pressed-expression": "playit()",
                    "text": "Button",
                    "src": "Default/3D_Video_Play.png",
                    "width": "0.1",
                    "x": "0.2748",
                    "y": "0.1285",
                    "z": "0.0001",
                    "rx": "0.00",
                    "ry": "90.00",
                    "rz": "18.99"
                  },
                  "name": "twx-dt-3dpress-button"
                },
                {
                  "attributes": {
                    "twx-widget": "",
                    "widget-id": "resetButton",
                    "widget-name": "resetButton",
                    "pressed-expression": "resetit()",
                    "text": "Reset",
                    "src": "Default/3D_Video_Stop.png",
                    "width": "0.1",
                    "x": "0.2748",
                    "y": "0.1285",
                    "z": "-0.1074",
                    "rx": "0.00",
                    "ry": "90.00",
                    "rz": "18.99"
                  },
                  "name": "twx-dt-3dpress-button"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "twx-fragment-parameters"
    },
    {
      "name": "twx-view-data"
    }
  ],
  "name": "twx-view"
}
